{"version":3,"sources":["Components/UserCard.js","Components/InputLabels.js","Components/RadioBtn.js","Components/DropDown.js","Components/Toggle.js","UserList.js","index.js"],"names":["UserCard","className","style","padding","borderRadius","alt","src","this","props","image","gender","fontFamily","name","charAt","toUpperCase","substring","location","phone","nat","React","Component","defaultProps","UserList","state","users","genderSelect","natSelect","natValues","sort","searchInput","contrastMode","handleChange","bind","handleClick","axios","get","then","response","data","results","map","user","first","picture","large","nationality","timezone","description","setState","deduped","Set","catch","error","console","log","event","target","value","type","checked","prevState","concat","a","b","genderMatch","natMatch","nameMatch","startsWith","key","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9145dd25.chunk.js","sourcesContent":["import React from 'react';\n//PropTypes defines type and which props are required\nimport PropTypes from 'prop-types';\n\n// define one single UserCard component\nclass UserCard extends React.Component {\n    render() {\n        return (\n            <div className=\"column is-2\" style={{ padding: \"20px\" }}>\n                <div className=\"card\" style={{ borderRadius: \"20px\" }}>\n                    <div className=\"card-image\">\n                        <figure className=\"image is-4by3\">\n                            <img alt='Profile' src={this.props.image}></img>\n                        </figure>\n                    </div>\n                    <div className=\"card-content\">\n                        <div className=\"media\">\n                            <div className=\"media-content\">\n                                <span className=\"has-text-grey-light\">{this.props.gender}</span>\n                                <p className=\"title is-4 has-text-primary\" style={{ fontFamily: 'Oswald, sans-serif' }}>{this.props.name.charAt(0).toUpperCase() + this.props.name.substring(1)}</p>\n                                <p className=\"subtitle is-size-6\">{this.props.location}</p>\n                                <p className=\"subtitle\">{this.props.phone}</p>\n                                <hr />\n                                <span className=\"has-text-grey-light\">Nationality</span>\n                                {this.props.nat ? <p className=\"subtitle\">{this.props.nat}</p> : null}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n// specify the default values for props\nUserCard.defaultProps = {\n    name: 'randomuser',\n    image: 'http://via.placeholder.com/400x400',\n    gender: '',\n    phone: '',\n    nat: '',\n    location: ''\n};\n\n// Check the correct type of props are supplied\nUserCard.propTypes = {\n    name: PropTypes.string,\n    image: PropTypes.string,\n    gender: PropTypes.string,\n    nat: PropTypes.string,\n    location: PropTypes.string\n};\n\nexport default UserCard;","import React from 'react';\n\n//define the input label component\nclass InputLabels extends React.Component {\n    render() {\n        return (\n            <div className=\"field\">\n                <label className=\"label\">{this.props.label}</label>\n                <div className=\"control\">\n                    {/*set the input label fields to the attribute values*/}\n                    <input name={this.props.name} value={this.props.value} onChange={this.props.handleChange} className=\"input\" type=\"text\" placeholder={this.props.placeholder} />\n                </div>\n            </div>\n\n        );\n    }\n}\n\nexport default InputLabels;","import React from 'react';\n\n//define the radio button component\nclass SortRadioButton extends React.Component {\n    render() {\n        return (\n            <div className=\"field\">\n                <label className=\"label\">Sort alphabetically by name?</label>\n                <div className=\"control\">\n                    <label className=\"radio\">\n                        <input type=\"radio\" name=\"sort\" value=\"yes\" checked={this.props.checked === 'yes'} onChange={this.props.handleChange} />\n                        yes\n                   </label>\n                    <label className=\"radio\">\n                        <input type=\"radio\" name=\"sort\" value=\"no\" checked={this.props.checked === 'no'} onChange={this.props.handleChange} />\n                        no\n                    </label>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default SortRadioButton;","import React from 'react';\n\n//define the dropdown component\nclass DropDown extends React.Component {\n    //define your logic within the render method\n    render() {\n        //map through the list of options received frop the API\n        const options = this.props.options.map(item => {\n            return <option key={item} value={item}>{item}</option>;\n        });\n        return (\n            <div className=\"field\">\n                <label className=\"label\">{this.props.label}</label>\n                <div className=\"control\">\n                    <div className=\"select is-fullwidth\">\n                        <select value={this.props.selected} name={this.props.name} onChange={this.props.handleChange}>\n                            {options}\n                        </select>\n                    </div>\n                </div>\n            </div>\n\n        );\n    }\n}\n\nexport default DropDown;","import React from 'react';\n\n//define the Toggle button component for light and dark modes\nclass ToggleButton extends React.Component {\n    render() {\n        return (\n            <div className=\"field\">\n                <div className=\"field-label\">\n                    <div className=\"control\">\n                        {/*on button click set the attribute values for labelOn or labelOff depending on the button's true/false values*/}\n                        <button className=\"button is-primary\" name={this.props.name} onClick={this.props.handleClick}>{this.props.toggle ? this.props.labelOn : this.props.labelOff}</button>\n                    </div>\n                </div>\n            </div>\n\n        );\n    }\n}\n\nexport default ToggleButton;","import React from 'react';\n//import one User Card component\nimport UserCard from './Components/UserCard';\n//import filter components\nimport InputLabels from './Components/InputLabels';\nimport RadioBtn from './Components/RadioBtn';\nimport DropDown from './Components/DropDown';\nimport Toggle from './Components/Toggle';\n//Axios is a lightweight HTTP client based on the $http service within Angular.js\n//Axios provides support for request and response interceptors, transformers and auto-conversion to JSON\n// Use \"npm install axios\" command to install\nimport axios from 'axios';\n\n//Define the UserList component\nclass UserList extends React.Component {\n    constructor() {\n        super();\n        //set the state keys and values\n        this.state = {\n            users: [],\n            genderSelect: 'all',\n            natSelect: 'all',\n            natValues: [],\n            sort: 'no',\n            searchInput: '',\n            contrastMode: false\n        };\n        //bind the \"this\" keyword to use for event\n        this.handleChange = this.handleChange.bind(this);\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    componentDidMount() {\n        //get the users from the API and store their values in the state\n        //you can change the API's URL result value to display more users\n        axios.get('https://randomuser.me/api/?results=45')\n            .then(response => {\n                //map through the users data results in the API\n                const users = response.data.results.map(user => {\n                    return {\n                        //return the API values and set to the state values\n                        name: user.name.first,\n                        image: user.picture.large,\n                        gender: user.gender,\n                        nationality: user.nat,\n                        location: user.location.timezone.description,\n                        phone: user.phone,\n                    };\n                });\n                //change the state of the users\n                this.setState({ users: users });\n\n                // sort and remove duplicate nationalities\n                // store the result in state to be used for the dropdown menu options\n                const nat = users.map(user => {\n                    return user.nationality;\n                });\n                const deduped = [...new Set(nat)];\n                deduped.sort();\n                this.setState({ natValues: deduped });\n            })\n            .catch(error => {\n                console.log(error);\n            });\n    }\n\n    handleChange(event) {\n        //handle <select> UI elements\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n\n        this.setState({\n            [name]: value\n        });\n    }\n\n    handleClick(event) {\n        // handle the toggle <button>\n        const name = event.target.name;\n        this.setState(prevState => ({\n            [name]: !prevState[name]\n        }));\n    }\n\n    render() {\n        // if results are to be sorted, create a copy of the user data and sort it,\n        // otherwise just use the original data from the state\n        const data = this.state.sort === 'no' ? this.state.users : [].concat(this.state.users)\n            .sort((a, b) => {\n                if (a.name < b.name) return -1;\n                if (a.name > b.name) return 1;\n                return 0;\n            });\n        /*\n        generate a list of users for each unique user card\n        each of the user cards needs a unique key\n        check the input state and skip the cards not matching the required nationality/gender/search text \n        */\n        let userList = data.map(user => {\n            const genderMatch = (this.state.genderSelect === user.gender || this.state.genderSelect === 'all');\n            const natMatch = (this.state.natSelect === user.nationality || this.state.natSelect === 'all');\n            const nameMatch = user.name.startsWith(this.state.searchInput);\n            return (genderMatch && natMatch && nameMatch) ? (\n                <UserCard name={user.name} image={user.image} nat={user.nationality} key={user.name + user.image} gender={user.gender} location={user.location} phone={user.phone}/>\n            ) : null;\n        });\n//console.log(userList);\n        return (\n            //add a containing element for all nested elements\n            <div>\n                <section className=\"is-fluid\">\n                    <nav className=\"navbar has-background-primary\">\n                        <h1 className=\"navbar-item title is-1 has-text-white\" style={{fontFamily: 'Oswald, sans-serif'}}>List of Users</h1>\n                    </nav>\n                    <div className={this.state.contrastMode ? \"columns has-background-black\" : \"columns\"} style={{ borderRadius: 0, padding: \"0px 40px\" }}>\n                        <hr />\n                        {/*FILTER INPUTS*/}\n                        <div className=\"column\" style={{ padding: \"50px\" }}>\n                            <DropDown options={['all', 'male', 'female']} name=\"genderSelect\" handleChange={this.handleChange} label=\"Filter by gender\" selected={this.state.genderSelect} />\n                            <DropDown options={['all'].concat(this.state.natValues)} name=\"natSelect\" handleChange={this.handleChange} label=\"Filter by nationality\" selected={this.state.natSelect} />\n                            <RadioBtn handleChange={this.handleChange} checked={this.state.sort} />\n                            <InputLabels name=\"searchInput\" label=\"Search by name\" value={this.state.searchInput} handleChange={this.handleChange} placeholder={\"e.g. Stewart\"} />\n                            <Toggle name=\"contrastMode\" handleClick={this.handleClick} toggle={this.state.contrastMode} labelOn=\"Switch to White mode\" labelOff=\"Switch to Black mode\" />\n                        </div>\n                        {/*USER LIST*/}\n                        <div className=\"column is-four-fifths\">\n                            <div className=\"columns is-multiline\" style={{ paddingBottom: \"50px\", paddingTop: \"50px\" }}>\n                                {/*Draw the userList defined in the render method above*/}\n                                {userList}\n                            </div>\n                        </div>\n                    </div>\n                </section>\n                <footer className=\"footer has-background-primary\">\n                    <div className=\"content has-text-centered\">\n                        <p className=\"has-text-white-bis\"><strong>Random User API</strong> styled with Bulma.</p>\n                    </div>\n                </footer>\n            </div>\n        );\n    }\n}\n\nexport default UserList;","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import the list of users\nimport UserList from './UserList'\n// import stylesheet \n//MAKE SURE TO INSTALL USING npm install bulma\nimport 'bulma/css/bulma.css';\n\n// draw the UserList component\nReactDOM.render(\n    <UserList />,\n    document.getElementById('root')\n);"],"sourceRoot":""}