{"ast":null,"code":"var _jsxFileName = \"/workspace/bewd_react_fetchapi/my-react-app/src/UserList.js\";\nimport React from 'react'; //import one User Card component\n\nimport UserCard from './Components/UserCard'; //import filter components\n\nimport InputLabels from './Components/InputLabels';\nimport RadioBtn from './Components/RadioBtn';\nimport DropDown from './Components/DropDown';\nimport Toggle from './Components/Toggle'; //Axios is a lightweight HTTP client based on the $http service within Angular.js\n//Axios provides support for request and response interceptors, transformers and auto-conversion to JSON\n// Use \"npm install axios\" command to install\n\nimport axios from 'axios'; //Define the UserList component\n\nclass UserList extends React.Component {\n  constructor() {\n    super(); //set the state keys and values\n\n    this.state = {\n      users: [],\n      genderSelect: 'all',\n      natSelect: 'all',\n      natValues: [],\n      sort: 'no',\n      searchInput: '',\n      contrastMode: false\n    }; //bind the \"this\" keyword to use for event\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  componentDidMount() {\n    //get the users from the API and store their values in the state\n    //you can change the API's URL result value to display more users\n    axios.get('https://randomuser.me/api/?results=45').then(response => {\n      //map through the users data results in the API\n      const users = response.data.results.map(user => {\n        return {\n          //return the API values and set to the state values\n          name: user.name.first,\n          image: user.picture.large,\n          gender: user.gender,\n          nationality: user.nat,\n          location: user.location.timezone.description,\n          phone: user.phone\n        };\n      }); //change the state of the users\n\n      this.setState({\n        users: users\n      }); // sort and remove duplicate nationalities\n      // store the result in state to be used for the dropdown menu options\n\n      const nat = users.map(user => {\n        return user.nationality;\n      });\n      const deduped = [...new Set(nat)];\n      deduped.sort();\n      this.setState({\n        natValues: deduped\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n\n  handleChange(event) {\n    //handle <select> UI elements\n    const target = event.target;\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n    const name = target.name;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  handleClick(event) {\n    // handle the toggle <button>\n    const name = event.target.name;\n    this.setState(prevState => ({\n      [name]: !prevState[name]\n    }));\n  }\n\n  render() {\n    // if results are to be sorted, create a copy of the user data and sort it,\n    // otherwise just use the original data from the state\n    const data = this.state.sort === 'no' ? this.state.users : [].concat(this.state.users).sort((a, b) => {\n      if (a.name < b.name) return -1;\n      if (a.name > b.name) return 1;\n      return 0;\n    });\n    /*\n    generate a list of users for each unique user card\n    each of the user cards needs a unique key\n    check the input state and skip the cards not matching the required nationality/gender/search text \n    */\n\n    let userList = data.map(user => {\n      const genderMatch = this.state.genderSelect === user.gender || this.state.genderSelect === 'all';\n      const natMatch = this.state.natSelect === user.nationality || this.state.natSelect === 'all';\n      const nameMatch = user.name.startsWith(this.state.searchInput);\n      return genderMatch && natMatch && nameMatch ? /*#__PURE__*/React.createElement(UserCard, {\n        name: user.name,\n        image: user.image,\n        nat: user.nationality,\n        key: user.name + user.image,\n        gender: user.gender,\n        location: user.location,\n        phone: user.phone,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 17\n        }\n      }) : null;\n    }); //console.log(userList);\n\n    return (\n      /*#__PURE__*/\n      //add a containing element for all nested elements\n      React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"section\", {\n        className: \"is-fluid\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"nav\", {\n        className: \"navbar has-background-primary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        className: \"navbar-item title is-1 has-text-white\",\n        style: {\n          fontFamily: 'Oswald, sans-serif'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 25\n        }\n      }, \"List of Users\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: this.state.contrastMode ? \"columns has-background-black\" : \"columns\",\n        style: {\n          borderRadius: 0,\n          padding: \"0px 40px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"hr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"column\",\n        style: {\n          padding: \"50px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(DropDown, {\n        options: ['all', 'male', 'female'],\n        name: \"genderSelect\",\n        handleChange: this.handleChange,\n        label: \"Filter by gender\",\n        selected: this.state.genderSelect,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(DropDown, {\n        options: ['all'].concat(this.state.natValues),\n        name: \"natSelect\",\n        handleChange: this.handleChange,\n        label: \"Filter by nationality\",\n        selected: this.state.natSelect,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(RadioBtn, {\n        handleChange: this.handleChange,\n        checked: this.state.sort,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(InputLabels, {\n        name: \"searchInput\",\n        label: \"Search by name\",\n        value: this.state.searchInput,\n        handleChange: this.handleChange,\n        placeholder: \"e.g. Stewart\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Toggle, {\n        name: \"contrastMode\",\n        handleClick: this.handleClick,\n        toggle: this.state.contrastMode,\n        labelOn: \"Switch to White mode\",\n        labelOff: \"Switch to Black mode\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 29\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"column is-four-fifths\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"columns is-multiline\",\n        style: {\n          paddingBottom: \"50px\",\n          paddingTop: \"50px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 29\n        }\n      }, userList)))), /*#__PURE__*/React.createElement(\"footer\", {\n        className: \"footer has-background-primary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content has-text-centered\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        className: \"has-text-white-bis\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 59\n        }\n      }, \"Random User API\"), \" styled with Bulma.\"))))\n    );\n  }\n\n}\n\nexport default UserList;","map":{"version":3,"sources":["/workspace/bewd_react_fetchapi/my-react-app/src/UserList.js"],"names":["React","UserCard","InputLabels","RadioBtn","DropDown","Toggle","axios","UserList","Component","constructor","state","users","genderSelect","natSelect","natValues","sort","searchInput","contrastMode","handleChange","bind","handleClick","componentDidMount","get","then","response","data","results","map","user","name","first","image","picture","large","gender","nationality","nat","location","timezone","description","phone","setState","deduped","Set","catch","error","console","log","event","target","value","type","checked","prevState","render","concat","a","b","userList","genderMatch","natMatch","nameMatch","startsWith","fontFamily","borderRadius","padding","paddingBottom","paddingTop"],"mappings":"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","sourcesContent":["import React from 'react';\n//import one User Card component\nimport UserCard from './Components/UserCard';\n//import filter components\nimport InputLabels from './Components/InputLabels';\nimport RadioBtn from './Components/RadioBtn';\nimport DropDown from './Components/DropDown';\nimport Toggle from './Components/Toggle';\n//Axios is a lightweight HTTP client based on the $http service within Angular.js\n//Axios provides support for request and response interceptors, transformers and auto-conversion to JSON\n// Use \"npm install axios\" command to install\nimport axios from 'axios';\n\n//Define the UserList component\nclass UserList extends React.Component {\n    constructor() {\n        super();\n        //set the state keys and values\n        this.state = {\n            users: [],\n            genderSelect: 'all',\n            natSelect: 'all',\n            natValues: [],\n            sort: 'no',\n            searchInput: '',\n            contrastMode: false\n        };\n        //bind the \"this\" keyword to use for event\n        this.handleChange = this.handleChange.bind(this);\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    componentDidMount() {\n        //get the users from the API and store their values in the state\n        //you can change the API's URL result value to display more users\n        axios.get('https://randomuser.me/api/?results=45')\n            .then(response => {\n                //map through the users data results in the API\n                const users = response.data.results.map(user => {\n                    return {\n                        //return the API values and set to the state values\n                        name: user.name.first,\n                        image: user.picture.large,\n                        gender: user.gender,\n                        nationality: user.nat,\n                        location: user.location.timezone.description,\n                        phone: user.phone,\n                    };\n                });\n                //change the state of the users\n                this.setState({ users: users });\n\n                // sort and remove duplicate nationalities\n                // store the result in state to be used for the dropdown menu options\n                const nat = users.map(user => {\n                    return user.nationality;\n                });\n                const deduped = [...new Set(nat)];\n                deduped.sort();\n                this.setState({ natValues: deduped });\n            })\n            .catch(error => {\n                console.log(error);\n            });\n    }\n\n    handleChange(event) {\n        //handle <select> UI elements\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n\n        this.setState({\n            [name]: value\n        });\n    }\n\n    handleClick(event) {\n        // handle the toggle <button>\n        const name = event.target.name;\n        this.setState(prevState => ({\n            [name]: !prevState[name]\n        }));\n    }\n\n    render() {\n        // if results are to be sorted, create a copy of the user data and sort it,\n        // otherwise just use the original data from the state\n        const data = this.state.sort === 'no' ? this.state.users : [].concat(this.state.users)\n            .sort((a, b) => {\n                if (a.name < b.name) return -1;\n                if (a.name > b.name) return 1;\n                return 0;\n            });\n        /*\n        generate a list of users for each unique user card\n        each of the user cards needs a unique key\n        check the input state and skip the cards not matching the required nationality/gender/search text \n        */\n        let userList = data.map(user => {\n            const genderMatch = (this.state.genderSelect === user.gender || this.state.genderSelect === 'all');\n            const natMatch = (this.state.natSelect === user.nationality || this.state.natSelect === 'all');\n            const nameMatch = user.name.startsWith(this.state.searchInput);\n            return (genderMatch && natMatch && nameMatch) ? (\n                <UserCard name={user.name} image={user.image} nat={user.nationality} key={user.name + user.image} gender={user.gender} location={user.location} phone={user.phone}/>\n            ) : null;\n        });\n//console.log(userList);\n        return (\n            //add a containing element for all nested elements\n            <div>\n                <section className=\"is-fluid\">\n                    <nav className=\"navbar has-background-primary\">\n                        <h1 className=\"navbar-item title is-1 has-text-white\" style={{fontFamily: 'Oswald, sans-serif'}}>List of Users</h1>\n                    </nav>\n                    <div className={this.state.contrastMode ? \"columns has-background-black\" : \"columns\"} style={{ borderRadius: 0, padding: \"0px 40px\" }}>\n                        <hr />\n                        {/*FILTER INPUTS*/}\n                        <div className=\"column\" style={{ padding: \"50px\" }}>\n                            <DropDown options={['all', 'male', 'female']} name=\"genderSelect\" handleChange={this.handleChange} label=\"Filter by gender\" selected={this.state.genderSelect} />\n                            <DropDown options={['all'].concat(this.state.natValues)} name=\"natSelect\" handleChange={this.handleChange} label=\"Filter by nationality\" selected={this.state.natSelect} />\n                            <RadioBtn handleChange={this.handleChange} checked={this.state.sort} />\n                            <InputLabels name=\"searchInput\" label=\"Search by name\" value={this.state.searchInput} handleChange={this.handleChange} placeholder={\"e.g. Stewart\"} />\n                            <Toggle name=\"contrastMode\" handleClick={this.handleClick} toggle={this.state.contrastMode} labelOn=\"Switch to White mode\" labelOff=\"Switch to Black mode\" />\n                        </div>\n                        {/*USER LIST*/}\n                        <div className=\"column is-four-fifths\">\n                            <div className=\"columns is-multiline\" style={{ paddingBottom: \"50px\", paddingTop: \"50px\" }}>\n                                {/*Draw the userList defined in the render method above*/}\n                                {userList}\n                            </div>\n                        </div>\n                    </div>\n                </section>\n                <footer className=\"footer has-background-primary\">\n                    <div className=\"content has-text-centered\">\n                        <p className=\"has-text-white-bis\"><strong>Random User API</strong> styled with Bulma.</p>\n                    </div>\n                </footer>\n            </div>\n        );\n    }\n}\n\nexport default UserList;"]},"metadata":{},"sourceType":"module"}